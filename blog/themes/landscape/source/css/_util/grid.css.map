{"version":3,"sources":["blog/themes/landscape/source/css/_util/grid.styl","node_modules/axis/axis/layout.styl"],"names":[],"mappings":"AAiBA;EAEE,YAAA;;ACbA;EACE,YAAA;EACA,eAAA;EACA,YAAA","sourcesContent":["/////////////////\n// Semantic.gs // for Stylus: http://learnboost.github.com/stylus/\n/////////////////\n\n// Utility function â€” you should never need to modify this\n// _gridsystem-width = (column-width + gutter-width) * columns\ngridsystem-width(_columns = columns)\n  (column-width + gutter-width) * _columns\n\n// Set @total-width to 100% for a fluid layout\n// total-width = gridsystem-width(columns)\ntotal-width = 100%\n\n//////////\n// GRID //\n//////////\n\nbody\n  clearfix()\n  width: 100%\n\nrow(_columns = columns)\n  clearfix()\n  display: block\n  width: total-width * ((gutter-width + gridsystem-width(_columns)) / gridsystem-width(_columns))\n  margin: 0 total-width * (((gutter-width * .5) / gridsystem-width(_columns)) * -1)\n\ncolumn(x, _columns = columns)\n  display: inline\n  float: left\n  width: total-width * ((((gutter-width + column-width) * x) - gutter-width) / gridsystem-width(_columns))\n  margin: 0 total-width * ((gutter-width * .5) / gridsystem-width(_columns))\n\npush(offset = 1)\n  margin-left: total-width * (((gutter-width + column-width) * offset) / gridsystem-width(columns))\n\npull(offset = 1)\n  margin-right: total-width * (((gutter-width + column-width) * offset) / gridsystem-width(columns))","// Mixin: group\n// Clearfix with a better name. Excellent for wrangling floats. Taken from\n// http://www.cssmojo.com/latest_new_clearfix_so_far/\n// Does not support IE 6 and 7 because you should not support them either.\n\ngroup()\n  &:after\n    content: \"\"\n    display: block\n    clear: both\n\n// Alias: clearfix\n// Group with a worse name. If you need really can't break the habit.\nclearfix()\n  group()\n\n// Function: pos\n// Backs position helpers, found below\n-pos(type, args)\n  i = 0\n  position: unquote(type)\n  for j in (1..4)\n    if length(args) > i\n      {args[i]}: args[i + 1] is a 'unit' ? args[i += 1] : 0\n    i += 1\n\n// Mixin: Positions\n// Syntax shortcuts for absolute, relative, and fixed positioning. Ported\n// from nib: https://github.com/tj/nib/blob/master/lib/nib/positions.styl\n\nfixed()\n  -pos('fixed', arguments)\n\nabsolute()\n  -pos('absolute', arguments)\n\nrelative()\n  -pos('relative', arguments)\n\n// Mixin: Size\n// Shortcut for setting width and height quickly. If passed one value, sets this\n// value as both width and height.\n//\n// ex. size: 10px 30px\n// ex. size: 10px\n\nsize()\n  if length(arguments) == 1\n    width: arguments[0]\n    height: arguments[0]\n  else\n    width: arguments[0]\n    height: arguments[1]\n\n// Mixin: Columns\n//\n// For css3 columns. Takes column count (int), column gap (px, em), column width\n// (px, em), and a border-like declaration if you want a column rule. This\n// follows exactly with the css3 spec, it's just quicker.\n//\n// ex. columns()\n// ex. columns: 5\n// ex. columns(8, 15px, 200px, '1px solid red')\n\ncolumns($count = 3, $gap = 30px, $width = null, $rule = null)\n  column-count: $count\n  column-gap: $gap\n  column-width: $width if $width\n  column-rule: unquote($rule) if $rule\n\n// Mixin: Avoid Column Break\n//\n// If you have a list that is broken into columns, this will make sure that the\n// list item is not split across columns awkwardly. Works only in webkit at the\n// moment.\n//\n// ex. avoid-column-break()\n\navoid-column-break()\n  column-break-inside: avoid\n\n// Mixin: Vertically Align\n// Cross browser vertical align. Works down to IE9.\n//\n// ex. vertically-align() or reset it with vertically-align(false)\n\nvertically-align($reset = null)\n  if $reset != false\n    position: relative\n    top: 50%\n    transform: translateY(-50%)\n  else\n    position: relative\n    top: 0\n    transform: translateY(0)\n\n// Mixin: Media\n//\n// Based on Nicole Sullivan's media class, made famous by Facebook\n// http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-\n// hundreds-of-lines-of-code\n//\n// Put this on a parent and it will split the first two children left and right,\n// like you would with perhaps a comment with an avatar to the left. Pass it a\n// margin between the two. Explained fully here:\n// http://carrotblog.com/css-patterns-evolved/\n//\n// This mixin works right when the element you apply it to has two or three\n// direct children. The first one will float to the left, the second one will be\n// to the right of the first, and third will go farthest right.\n//\n// ex. media-object()\n// ex. media-object: 15px\n// ex. media-object: 15px 10px\n\nmedia-object($margin = 10px)\n\n  $left-margin = $margin\n  $right-margin = $margin\n\n  if length(arguments) > 1\n    $left-margin = arguments[0]\n    $right-margin = arguments[1]\n\n  overflow: hidden\n  zoom: 1\n\n  & > *\n    display: inline-block\n    overflow: hidden\n  & > *:first-child\n    float: left\n    margin-right: $right-margin\n  & > *:nth-child(3)\n    float: right\n    margin-left: $left-margin\n\n// Mixin: Ratio Box\n// Set a specific width/height ratio. Useful on background images and iframes.\n\nratio-box($ratio = 1/1)\n  $ratio = remove-unit($ratio)\n  overflow: hidden\n  position: relative\n\n  &:before\n    content: ''\n    display: block\n    height: 0\n    padding-top: (1 / $ratio) * 100%\n\n// Mixin: Horizontal Rule\n//\n// Clean reset for divider lines.\n//\n// ex: rule()\n// ex rule(blue)\n\nrule($color = rgba(#000, .15), $spacing = 1.5em)\n  border: 0\n  border-bottom: 1px solid $color\n  height: 0\n  padding: 0\n  margin: $spacing 0\n\n// Mixin: Table Layout\n//\n// Sometimes you just need a good old-fashioned table layout.\n// Read more: http://colintoh.com/blog/display-table-anti-hero\n//\n// ex: tl()\n// ex: tl(auto)\n\ntl($layout-type = fixed)\n  display: table\n  table-layout: $layout-type  // \"fixed\" or \"auto\"\n  margin: 0\n  padding: 0\n  width: 100%\n\n  > *\n    display: table-cell\n"]}